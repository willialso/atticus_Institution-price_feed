{"version":3,"file":"transforms.js","sourceRoot":"","sources":["../../../../src/agent/http/transforms.ts"],"names":[],"mappings":"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","sourcesContent":["import { lebEncode } from '@dfinity/candid';\nimport {\n  Endpoint,\n  type HttpAgentRequest,\n  type HttpAgentRequestTransformFn,\n  type HttpHeaderField,\n  makeNonce,\n  type Nonce,\n} from './types.ts';\nimport { ExpiryJsonDeserializeErrorCode, InputError } from '../../errors.ts';\n\nexport const JSON_KEY_EXPIRY = '__expiry__';\nconst NANOSECONDS_PER_MILLISECOND = BigInt(1_000_000);\nconst NANOSECONDS_PER_SECOND = NANOSECONDS_PER_MILLISECOND * BigInt(1_000);\nconst SECONDS_PER_MINUTE = BigInt(60);\n\nconst REPLICA_PERMITTED_DRIFT_MILLISECONDS = 60 * 1000;\n\nexport type JsonnableExpiry = {\n  [JSON_KEY_EXPIRY]: string;\n};\n\nexport class Expiry {\n  public readonly _isExpiry = true;\n\n  private constructor(private readonly __expiry__: bigint) {}\n\n  /**\n   * Creates an Expiry object from a delta in milliseconds.\n   * If the delta is less than 90 seconds, it is rounded to the nearest second.\n   * Otherwise, the delta is rounded down to the nearest minute, with a\n   * replica permitted drift subtracted.\n   * @param deltaInMs The delta in milliseconds.\n   * @returns {Expiry} an Expiry object\n   */\n  public static fromDeltaInMilliseconds(deltaInMs: number): Expiry {\n    // if ingress as seconds is less than 90, round to nearest second\n    if (deltaInMs < 90 * 1_000) {\n      // Raw value without subtraction of REPLICA_PERMITTED_DRIFT_MILLISECONDS\n      const raw_value = BigInt(Date.now() + deltaInMs) * NANOSECONDS_PER_MILLISECOND;\n      const ingress_as_seconds = raw_value / NANOSECONDS_PER_SECOND;\n      return new Expiry(ingress_as_seconds * NANOSECONDS_PER_SECOND);\n    }\n\n    // Use bigint because it can overflow the maximum number allowed in a double float.\n    const raw_value =\n      BigInt(Math.floor(Date.now() + deltaInMs - REPLICA_PERMITTED_DRIFT_MILLISECONDS)) *\n      NANOSECONDS_PER_MILLISECOND;\n\n    // round down to the nearest second\n    const ingress_as_seconds = raw_value / NANOSECONDS_PER_SECOND;\n\n    // round down to nearest minute\n    const ingress_as_minutes = ingress_as_seconds / SECONDS_PER_MINUTE;\n\n    const rounded_down_nanos = ingress_as_minutes * SECONDS_PER_MINUTE * NANOSECONDS_PER_SECOND;\n\n    return new Expiry(rounded_down_nanos);\n  }\n\n  public toBigInt(): bigint {\n    return this.__expiry__;\n  }\n\n  public toHash(): Uint8Array {\n    return lebEncode(this.__expiry__);\n  }\n\n  public toString(): string {\n    return this.__expiry__.toString();\n  }\n\n  /**\n   * Serializes to JSON\n   * @returns {JsonnableExpiry} a JSON object with a single key, {@link JSON_KEY_EXPIRY}, whose value is the expiry as a string\n   */\n  public toJSON(): JsonnableExpiry {\n    return { [JSON_KEY_EXPIRY]: this.toString() };\n  }\n\n  /**\n   * Deserializes a {@link JsonnableExpiry} object from a JSON string.\n   * @param input The JSON string to deserialize.\n   * @returns {Expiry} The deserialized Expiry object.\n   */\n  public static fromJSON(input: string): Expiry {\n    const obj = JSON.parse(input);\n    if (obj[JSON_KEY_EXPIRY]) {\n      try {\n        const expiry = BigInt(obj[JSON_KEY_EXPIRY]);\n        return new Expiry(expiry);\n      } catch (error) {\n        throw new InputError(new ExpiryJsonDeserializeErrorCode(`Not a valid BigInt: ${error}`));\n      }\n    }\n    throw new InputError(\n      new ExpiryJsonDeserializeErrorCode(`The input does not contain the key ${JSON_KEY_EXPIRY}`),\n    );\n  }\n\n  public static isExpiry(other: unknown): other is Expiry {\n    return (\n      other instanceof Expiry ||\n      (typeof other === 'object' &&\n        other !== null &&\n        '_isExpiry' in other &&\n        (other as { _isExpiry: boolean })['_isExpiry'] === true &&\n        '__expiry__' in other &&\n        typeof (other as { __expiry__: bigint })['__expiry__'] === 'bigint')\n    );\n  }\n}\n\n/**\n * Create a Nonce transform, which takes a function that returns a Buffer, and adds it\n * as the nonce to every call requests.\n * @param nonceFn A function that returns a buffer. By default uses a semi-random method.\n */\nexport function makeNonceTransform(nonceFn: () => Nonce = makeNonce): HttpAgentRequestTransformFn {\n  return async (request: HttpAgentRequest) => {\n    // Nonce needs to be inserted into the header for all requests, to enable logs to be correlated with requests.\n    const headers = request.request.headers;\n    // TODO: uncomment this when the http proxy supports it.\n    // headers.set('X-IC-Request-ID', toHex(new Uint8Array(nonce)));\n    request.request.headers = headers;\n\n    // Nonce only needs to be inserted into the body for async calls, to prevent replay attacks.\n    if (request.endpoint === Endpoint.Call) {\n      request.body.nonce = nonceFn();\n    }\n  };\n}\n\n/**\n * Create a transform that adds a delay (by default 5 minutes) to the expiry.\n * @param delayInMilliseconds The delay to add to the call time, in milliseconds.\n */\nexport function makeExpiryTransform(delayInMilliseconds: number): HttpAgentRequestTransformFn {\n  return async (request: HttpAgentRequest) => {\n    request.body.ingress_expiry = Expiry.fromDeltaInMilliseconds(delayInMilliseconds);\n  };\n}\n\n/**\n * Maps the default fetch headers field to the serializable HttpHeaderField.\n * @param headers Fetch definition of the headers type\n * @returns array of header fields\n */\nexport function httpHeadersTransform(headers: Headers): HttpHeaderField[] {\n  const headerFields: HttpHeaderField[] = [];\n  headers.forEach((value, key) => {\n    headerFields.push([key, value]);\n  });\n  return headerFields;\n}\n"]}