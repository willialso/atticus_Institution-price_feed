{"version":3,"file":"public_key.js","sourceRoot":"","sources":["../../src/public_key.ts"],"names":[],"mappings":";;;AACA,qCAA2D;AAC3D,2CAA6D;AAE7D,MAAa,gBAAgB;IACpB,MAAM,CAAC,IAAI,CAAC,GAAc;QAC/B,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;IACnC,CAAC;IAEM,MAAM,CAAC,OAAO,CAAC,MAAkB;QACtC,OAAO,IAAI,gBAAgB,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC;IAEM,MAAM,CAAC,OAAO,CAAC,MAA2B;QAC/C,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;IACtD,CAAC;IAED,wDAAwD;aACzC,mBAAc,GAAG,EAAE,CAAC;IAE3B,MAAM,CAAC,SAAS,CAAC,SAAqB;QAC5C,OAAO,IAAA,gBAAO,EAAC,SAAS,EAAE,oBAAW,CAAwB,CAAC;IAChE,CAAC;IAEO,MAAM,CAAC,SAAS,CAAC,GAAwB;QAC/C,MAAM,SAAS,GAAG,IAAA,kBAAS,EAAC,GAAG,EAAE,oBAAW,CAAC,CAAC;QAC9C,IAAI,SAAS,CAAC,MAAM,KAAK,IAAI,CAAC,cAAc,EAAE,CAAC;YAC7C,MAAM,sBAAU,CAAC,QAAQ,CACvB,IAAI,8BAAkB,CAAC,qDAAqD,CAAC,CAC9E,CAAC;QACJ,CAAC;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,OAAO,CAAa;IAEpB,IAAW,MAAM;QACf,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,OAAO,CAAsB;IAE7B,IAAW,MAAM;QACf,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,kFAAkF;IAClF,YAAoB,GAAe;QACjC,IAAI,GAAG,CAAC,UAAU,KAAK,gBAAgB,CAAC,cAAc,EAAE,CAAC;YACvD,MAAM,sBAAU,CAAC,QAAQ,CACvB,IAAI,8BAAkB,CAAC,qDAAqD,CAAC,CAC9E,CAAC;QACJ,CAAC;QACD,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,gBAAgB,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IACjD,CAAC;IAEM,KAAK;QACV,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEM,KAAK;QACV,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;;AA3DH,4CA4DC","sourcesContent":["import { type DerEncodedPublicKey, type PublicKey } from './auth.ts';\nimport { ED25519_OID, unwrapDER, wrapDER } from './der.ts';\nimport { DerDecodeErrorCode, InputError } from './errors.ts';\n\nexport class Ed25519PublicKey implements PublicKey {\n  public static from(key: PublicKey): Ed25519PublicKey {\n    return this.fromDer(key.toDer());\n  }\n\n  public static fromRaw(rawKey: Uint8Array): Ed25519PublicKey {\n    return new Ed25519PublicKey(rawKey);\n  }\n\n  public static fromDer(derKey: DerEncodedPublicKey): Ed25519PublicKey {\n    return new Ed25519PublicKey(this.derDecode(derKey));\n  }\n\n  // The length of Ed25519 public keys is always 32 bytes.\n  private static RAW_KEY_LENGTH = 32;\n\n  private static derEncode(publicKey: Uint8Array): DerEncodedPublicKey {\n    return wrapDER(publicKey, ED25519_OID) as DerEncodedPublicKey;\n  }\n\n  private static derDecode(key: DerEncodedPublicKey): Uint8Array {\n    const unwrapped = unwrapDER(key, ED25519_OID);\n    if (unwrapped.length !== this.RAW_KEY_LENGTH) {\n      throw InputError.fromCode(\n        new DerDecodeErrorCode('An Ed25519 public key must be exactly 32 bytes long'),\n      );\n    }\n    return unwrapped;\n  }\n\n  #rawKey: Uint8Array;\n\n  public get rawKey(): Uint8Array {\n    return this.#rawKey;\n  }\n\n  #derKey: DerEncodedPublicKey;\n\n  public get derKey(): DerEncodedPublicKey {\n    return this.#derKey;\n  }\n\n  // `fromRaw` and `fromDer` should be used for instantiation, not this constructor.\n  private constructor(key: Uint8Array) {\n    if (key.byteLength !== Ed25519PublicKey.RAW_KEY_LENGTH) {\n      throw InputError.fromCode(\n        new DerDecodeErrorCode('An Ed25519 public key must be exactly 32 bytes long'),\n      );\n    }\n    this.#rawKey = key;\n    this.#derKey = Ed25519PublicKey.derEncode(key);\n  }\n\n  public toDer(): DerEncodedPublicKey {\n    return this.derKey;\n  }\n\n  public toRaw(): Uint8Array {\n    return this.rawKey;\n  }\n}\n"]}