{"version":3,"file":"certificate.js","sourceRoot":"","sources":["../../src/certificate.ts"],"names":[],"mappings":"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","sourcesContent":["import * as cbor from './cbor.ts';\nimport {\n  CertificateHasTooManyDelegationsErrorCode,\n  CertificateNotAuthorizedErrorCode,\n  CertificateTimeErrorCode,\n  CertificateVerificationErrorCode,\n  DerKeyLengthMismatchErrorCode,\n  DerPrefixMismatchErrorCode,\n  ProtocolError,\n  LookupErrorCode,\n  TrustError,\n  UnknownError,\n  HashTreeDecodeErrorCode,\n  UNREACHABLE_ERROR,\n  MalformedLookupFoundValueErrorCode,\n  MissingLookupValueErrorCode,\n} from './errors.ts';\nimport { Principal } from '@dfinity/principal';\nimport * as bls from './utils/bls.ts';\nimport { decodeTime } from './utils/leb.ts';\nimport { MANAGEMENT_CANISTER_ID } from './agent/index.ts';\nimport { bytesToHex, concatBytes, hexToBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { uint8Equals } from './utils/buffer.ts';\nimport { sha256 } from '@noble/hashes/sha2';\n\nexport interface Cert {\n  tree: HashTree;\n  signature: Uint8Array;\n  delegation?: Delegation;\n}\n\nexport enum NodeType {\n  Empty = 0,\n  Fork = 1,\n  Labeled = 2,\n  Leaf = 3,\n  Pruned = 4,\n}\n\nexport type NodePath = Array<Uint8Array | string>;\nexport type NodeLabel = Uint8Array & { __nodeLabel__: void };\nexport type NodeValue = Uint8Array & { __nodeValue__: void };\nexport type NodeHash = Uint8Array & { __nodeHash__: void };\n\nexport type EmptyHashTree = [NodeType.Empty];\nexport type ForkHashTree = [NodeType.Fork, HashTree, HashTree];\nexport type LabeledHashTree = [NodeType.Labeled, NodeLabel, HashTree];\nexport type LeafHashTree = [NodeType.Leaf, NodeValue];\nexport type PrunedHashTree = [NodeType.Pruned, NodeHash];\n\nexport type HashTree =\n  | EmptyHashTree\n  | ForkHashTree\n  | LabeledHashTree\n  | LeafHashTree\n  | PrunedHashTree;\n\n/**\n * Make a human readable string out of a hash tree.\n * @param tree The hash tree to convert to a string\n */\nexport function hashTreeToString(tree: HashTree): string {\n  const indent = (s: string) =>\n    s\n      .split('\\n')\n      .map(x => '  ' + x)\n      .join('\\n');\n  function labelToString(label: Uint8Array): string {\n    const decoder = new TextDecoder(undefined, { fatal: true });\n    try {\n      return JSON.stringify(decoder.decode(label));\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (e) {\n      return `data(...${label.byteLength} bytes)`;\n    }\n  }\n\n  switch (tree[0]) {\n    case NodeType.Empty:\n      return '()';\n    case NodeType.Fork: {\n      if (tree[1] instanceof Array && tree[2] instanceof Uint8Array) {\n        const left = hashTreeToString(tree[1]);\n        const right = hashTreeToString(tree[2]);\n        return `sub(\\n left:\\n${indent(left)}\\n---\\n right:\\n${indent(right)}\\n)`;\n      } else {\n        throw UnknownError.fromCode(new HashTreeDecodeErrorCode('Invalid tree structure for fork'));\n      }\n    }\n    case NodeType.Labeled: {\n      if (tree[1] instanceof Uint8Array && tree[2] instanceof Uint8Array) {\n        const label = labelToString(tree[1]);\n        const sub = hashTreeToString(tree[2]);\n        return `label(\\n label:\\n${indent(label)}\\n sub:\\n${indent(sub)}\\n)`;\n      } else {\n        throw UnknownError.fromCode(\n          new HashTreeDecodeErrorCode('Invalid tree structure for labeled'),\n        );\n      }\n    }\n    case NodeType.Leaf: {\n      if (!tree[1]) {\n        throw UnknownError.fromCode(new HashTreeDecodeErrorCode('Invalid tree structure for leaf'));\n      } else if (Array.isArray(tree[1])) {\n        return JSON.stringify(tree[1]);\n      }\n      return `leaf(...${tree[1].byteLength} bytes)`;\n    }\n    case NodeType.Pruned: {\n      if (!tree[1]) {\n        throw UnknownError.fromCode(\n          new HashTreeDecodeErrorCode('Invalid tree structure for pruned'),\n        );\n      } else if (Array.isArray(tree[1])) {\n        return JSON.stringify(tree[1]);\n      }\n\n      return `pruned(${bytesToHex(new Uint8Array(tree[1]))}`;\n    }\n    default: {\n      return `unknown(${JSON.stringify(tree[0])})`;\n    }\n  }\n}\n\ninterface Delegation extends Record<string, unknown> {\n  subnet_id: Uint8Array;\n  certificate: Uint8Array;\n}\n\nfunction isBufferGreaterThan(a: Uint8Array, b: Uint8Array): boolean {\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] > b[i]) {\n      return true;\n    }\n  }\n  return false;\n}\n\ntype VerifyFunc = (pk: Uint8Array, sig: Uint8Array, msg: Uint8Array) => Promise<boolean> | boolean;\n\nexport interface CreateCertificateOptions {\n  /**\n   * The bytes encoding the certificate to be verified\n   */\n  certificate: Uint8Array;\n  /**\n   * The root key against which to verify the certificate\n   * (normally, the root key of the IC main network)\n   */\n  rootKey: Uint8Array;\n  /**\n   * The effective canister ID of the request when verifying a response, or\n   * the signing canister ID when verifying a certified variable.\n   */\n  canisterId: Principal;\n  /**\n   * BLS Verification strategy. Default strategy uses bls12_381 from @noble/curves\n   */\n  blsVerify?: VerifyFunc;\n\n  /**\n   * The maximum age of the certificate in minutes. Default is 5 minutes.\n   * @default 5\n   * This is used to verify the time the certificate was signed, particularly for validating Delegation certificates, which can live for longer than the default window of +/- 5 minutes. If the certificate is\n   * older than the specified age, it will fail verification.\n   */\n  maxAgeInMinutes?: number;\n\n  /**\n   * Overrides the maxAgeInMinutes setting and skips comparing the client's time against the certificate. Used for scenarios where the machine's clock is known to be out of sync, or for inspecting expired certificates.\n   */\n  disableTimeVerification?: boolean;\n}\n\nexport class Certificate {\n  public cert: Cert;\n  #disableTimeVerification: boolean = false;\n\n  /**\n   * Create a new instance of a certificate, automatically verifying it.\n   * @param {CreateCertificateOptions} options {@link CreateCertificateOptions}\n   * @param {Uint8Array} options.certificate The bytes of the certificate\n   * @param {Uint8Array} options.rootKey The root key to verify against\n   * @param {Principal} options.canisterId The effective or signing canister ID\n   * @param {number} options.maxAgeInMinutes The maximum age of the certificate in minutes. Default is 5 minutes.\n   * @throws if the certificate cannot be verified\n   */\n  public static async create(options: CreateCertificateOptions): Promise<Certificate> {\n    const cert = Certificate.createUnverified(options);\n\n    await cert.verify();\n    return cert;\n  }\n\n  private static createUnverified(options: CreateCertificateOptions): Certificate {\n    return new Certificate(\n      options.certificate,\n      options.rootKey,\n      options.canisterId,\n      options.blsVerify ?? bls.blsVerify,\n      options.maxAgeInMinutes,\n      options.disableTimeVerification,\n    );\n  }\n\n  private constructor(\n    certificate: Uint8Array,\n    private _rootKey: Uint8Array,\n    private _canisterId: Principal,\n    private _blsVerify: VerifyFunc,\n    // Default to 5 minutes\n    private _maxAgeInMinutes: number = 5,\n    disableTimeVerification: boolean = false,\n  ) {\n    this.#disableTimeVerification = disableTimeVerification;\n    this.cert = cbor.decode(certificate);\n  }\n\n  /**\n   * Lookup a path in the certificate tree, using {@link lookup_path}.\n   * @param path The path to lookup.\n   * @returns The result of the lookup.\n   */\n  public lookup_path(path: NodePath): LookupResult {\n    return lookup_path(path, this.cert.tree);\n  }\n\n  /**\n   * Lookup a subtree in the certificate tree, using {@link lookup_subtree}.\n   * @param path The path to lookup.\n   * @returns The result of the lookup.\n   */\n  public lookup_subtree(path: NodePath): SubtreeLookupResult {\n    return lookup_subtree(path, this.cert.tree);\n  }\n\n  private async verify(): Promise<void> {\n    const rootHash = await reconstruct(this.cert.tree);\n    const derKey = await this._checkDelegationAndGetKey(this.cert.delegation);\n    const sig = this.cert.signature;\n    const key = extractDER(derKey);\n    const msg = concatBytes(domain_sep('ic-state-root'), rootHash);\n    let sigVer = false;\n\n    const lookupTime = lookupResultToBuffer(this.lookup_path(['time']));\n    if (!lookupTime) {\n      // Should never happen - time is always present in IC certificates\n      throw ProtocolError.fromCode(\n        new CertificateVerificationErrorCode('Certificate does not contain a time'),\n      );\n    }\n\n    // Certificate time verification checks\n    if (!this.#disableTimeVerification) {\n      const FIVE_MINUTES_IN_MSEC = 5 * 60 * 1000;\n      const MAX_AGE_IN_MSEC = this._maxAgeInMinutes * 60 * 1000;\n      const now = Date.now();\n      const earliestCertificateTime = now - MAX_AGE_IN_MSEC;\n      const fiveMinutesFromNow = now + FIVE_MINUTES_IN_MSEC;\n\n      const certTime = decodeTime(lookupTime);\n\n      if (certTime.getTime() < earliestCertificateTime) {\n        throw TrustError.fromCode(\n          new CertificateTimeErrorCode(this._maxAgeInMinutes, certTime, new Date(now), 'past'),\n        );\n      } else if (certTime.getTime() > fiveMinutesFromNow) {\n        throw TrustError.fromCode(\n          new CertificateTimeErrorCode(5, certTime, new Date(now), 'future'),\n        );\n      }\n    }\n\n    try {\n      sigVer = await this._blsVerify(new Uint8Array(key), new Uint8Array(sig), new Uint8Array(msg));\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (err) {\n      sigVer = false;\n    }\n    if (!sigVer) {\n      throw TrustError.fromCode(\n        new CertificateVerificationErrorCode('Signature verification failed'),\n      );\n    }\n  }\n\n  private async _checkDelegationAndGetKey(d?: Delegation): Promise<Uint8Array> {\n    if (!d) {\n      return this._rootKey;\n    }\n\n    const cert = Certificate.createUnverified({\n      certificate: d.certificate,\n      rootKey: this._rootKey,\n      canisterId: this._canisterId,\n      blsVerify: this._blsVerify,\n      disableTimeVerification: true,\n    });\n\n    if (cert.cert.delegation) {\n      throw ProtocolError.fromCode(new CertificateHasTooManyDelegationsErrorCode());\n    }\n\n    await cert.verify();\n\n    if (this._canisterId.toString() !== MANAGEMENT_CANISTER_ID) {\n      const canisterInRange = check_canister_ranges({\n        canisterId: this._canisterId,\n        subnetId: Principal.fromUint8Array(new Uint8Array(d.subnet_id)),\n        tree: cert.cert.tree,\n      });\n      if (!canisterInRange) {\n        throw TrustError.fromCode(\n          new CertificateNotAuthorizedErrorCode(this._canisterId, d.subnet_id),\n        );\n      }\n    }\n    const publicKeyLookup = lookupResultToBuffer(\n      cert.lookup_path(['subnet', d.subnet_id, 'public_key']),\n    );\n    if (!publicKeyLookup) {\n      throw TrustError.fromCode(\n        new MissingLookupValueErrorCode(\n          `Could not find subnet key for subnet 0x${bytesToHex(d.subnet_id)}`,\n        ),\n      );\n    }\n    return publicKeyLookup;\n  }\n}\n\nconst DER_PREFIX = hexToBytes(\n  '308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100',\n);\nconst KEY_LENGTH = 96;\n\nfunction extractDER(buf: Uint8Array): Uint8Array {\n  const expectedLength = DER_PREFIX.byteLength + KEY_LENGTH;\n  if (buf.byteLength !== expectedLength) {\n    throw ProtocolError.fromCode(new DerKeyLengthMismatchErrorCode(expectedLength, buf.byteLength));\n  }\n  const prefix = buf.slice(0, DER_PREFIX.byteLength);\n  if (!uint8Equals(prefix, DER_PREFIX)) {\n    throw ProtocolError.fromCode(new DerPrefixMismatchErrorCode(DER_PREFIX, prefix));\n  }\n\n  return buf.slice(DER_PREFIX.byteLength);\n}\n\n/**\n * Utility function to constrain the type of a lookup result\n * @param result the result of a lookup\n * @returns {Uint8Array | undefined} the value if the lookup was found, `undefined` otherwise\n */\nexport function lookupResultToBuffer(result: LookupResult): Uint8Array | undefined {\n  if (result.status !== LookupPathStatus.Found) {\n    return undefined;\n  }\n\n  if (result.value instanceof Uint8Array) {\n    return result.value;\n  }\n\n  return undefined;\n}\n\n/**\n * @param t The hash tree to reconstruct\n */\nexport async function reconstruct(t: HashTree): Promise<Uint8Array> {\n  switch (t[0]) {\n    case NodeType.Empty:\n      return sha256(domain_sep('ic-hashtree-empty'));\n    case NodeType.Pruned:\n      return t[1];\n    case NodeType.Leaf:\n      return sha256(concatBytes(domain_sep('ic-hashtree-leaf'), t[1]));\n    case NodeType.Labeled:\n      return sha256(concatBytes(domain_sep('ic-hashtree-labeled'), t[1], await reconstruct(t[2])));\n    case NodeType.Fork:\n      return sha256(\n        concatBytes(\n          domain_sep('ic-hashtree-fork'),\n          await reconstruct(t[1]),\n          await reconstruct(t[2]),\n        ),\n      );\n    default:\n      throw UNREACHABLE_ERROR;\n  }\n}\n\n/**\n * Creates a domain separator for hashing by encoding the input string\n * with its length as a prefix.\n * @param s - The input string to encode.\n * @returns A Uint8Array containing the encoded domain separator.\n */\nexport function domain_sep(s: string): Uint8Array {\n  const len = new Uint8Array([s.length]);\n  const str = new TextEncoder().encode(s);\n  return concatBytes(len, str);\n}\n\nfunction pathToLabel(path: NodePath): NodeLabel {\n  return (typeof path[0] === 'string' ? utf8ToBytes(path[0]) : path[0]) as NodeLabel;\n}\n\nexport enum LookupPathStatus {\n  Unknown = 'Unknown',\n  Absent = 'Absent',\n  Found = 'Found',\n  Error = 'Error',\n}\n\nexport interface LookupPathResultAbsent {\n  status: LookupPathStatus.Absent;\n}\n\nexport interface LookupPathResultUnknown {\n  status: LookupPathStatus.Unknown;\n}\n\nexport interface LookupPathResultFound {\n  status: LookupPathStatus.Found;\n  value: Uint8Array;\n}\n\nexport interface LookupPathResultError {\n  status: LookupPathStatus.Error;\n}\n\nexport type LookupResult =\n  | LookupPathResultAbsent\n  | LookupPathResultUnknown\n  | LookupPathResultFound\n  | LookupPathResultError;\n\nexport enum LookupSubtreeStatus {\n  Absent = 'Absent',\n  Unknown = 'Unknown',\n  Found = 'Found',\n}\n\nexport interface LookupSubtreeResultAbsent {\n  status: LookupSubtreeStatus.Absent;\n}\n\nexport interface LookupSubtreeResultUnknown {\n  status: LookupSubtreeStatus.Unknown;\n}\n\nexport interface LookupSubtreeResultFound {\n  status: LookupSubtreeStatus.Found;\n  value: HashTree;\n}\n\nexport type SubtreeLookupResult =\n  | LookupSubtreeResultAbsent\n  | LookupSubtreeResultUnknown\n  | LookupSubtreeResultFound;\n\nexport enum LookupLabelStatus {\n  Absent = 'Absent',\n  Unknown = 'Unknown',\n  Found = 'Found',\n  Less = 'Less',\n  Greater = 'Greater',\n}\n\nexport interface LookupLabelResultAbsent {\n  status: LookupLabelStatus.Absent;\n}\n\nexport interface LookupLabelResultUnknown {\n  status: LookupLabelStatus.Unknown;\n}\n\nexport interface LookupLabelResultFound {\n  status: LookupLabelStatus.Found;\n  value: HashTree;\n}\n\nexport interface LookupLabelResultGreater {\n  status: LookupLabelStatus.Greater;\n}\n\nexport interface LookupLabelResultLess {\n  status: LookupLabelStatus.Less;\n}\n\nexport type LabelLookupResult =\n  | LookupLabelResultAbsent\n  | LookupLabelResultUnknown\n  | LookupLabelResultFound\n  | LookupLabelResultGreater\n  | LookupLabelResultLess;\n\n/**\n * Lookup a path in a tree. If the path is a subtree, use {@link lookup_subtree} instead.\n * @param path the path to look up\n * @param tree the tree to search\n * @returns {LookupResult} the result of the lookup\n */\nexport function lookup_path(path: NodePath, tree: HashTree): LookupResult {\n  if (path.length === 0) {\n    switch (tree[0]) {\n      case NodeType.Empty: {\n        return {\n          status: LookupPathStatus.Absent,\n        };\n      }\n\n      case NodeType.Leaf: {\n        if (!tree[1]) {\n          throw UnknownError.fromCode(\n            new HashTreeDecodeErrorCode('Invalid tree structure for leaf'),\n          );\n        }\n\n        if (tree[1] instanceof Uint8Array) {\n          return {\n            status: LookupPathStatus.Found,\n            value: tree[1].slice(tree[1].byteOffset, tree[1].byteLength + tree[1].byteOffset),\n          };\n        }\n\n        throw UNREACHABLE_ERROR;\n      }\n\n      case NodeType.Pruned: {\n        return {\n          status: LookupPathStatus.Unknown,\n        };\n      }\n\n      case NodeType.Labeled:\n      case NodeType.Fork: {\n        return {\n          status: LookupPathStatus.Error,\n        };\n      }\n\n      default: {\n        throw UNREACHABLE_ERROR;\n      }\n    }\n  }\n\n  const label = pathToLabel(path);\n  const lookupResult = find_label(label, tree);\n\n  switch (lookupResult.status) {\n    case LookupLabelStatus.Found: {\n      return lookup_path(path.slice(1), lookupResult.value);\n    }\n\n    case LookupLabelStatus.Absent:\n    case LookupLabelStatus.Greater:\n    case LookupLabelStatus.Less: {\n      return {\n        status: LookupPathStatus.Absent,\n      };\n    }\n\n    case LookupLabelStatus.Unknown: {\n      return {\n        status: LookupPathStatus.Unknown,\n      };\n    }\n\n    default: {\n      throw UNREACHABLE_ERROR;\n    }\n  }\n}\n\n/**\n * Lookup a subtree in a tree.\n * @param path the path to look up\n * @param tree the tree to search\n * @returns {SubtreeLookupResult} the result of the lookup\n */\nexport function lookup_subtree(path: NodePath, tree: HashTree): SubtreeLookupResult {\n  if (path.length === 0) {\n    return {\n      status: LookupSubtreeStatus.Found,\n      value: tree,\n    };\n  }\n\n  const label = pathToLabel(path);\n  const lookupResult = find_label(label, tree);\n\n  switch (lookupResult.status) {\n    case LookupLabelStatus.Found: {\n      return lookup_subtree(path.slice(1), lookupResult.value);\n    }\n\n    case LookupLabelStatus.Unknown: {\n      return {\n        status: LookupSubtreeStatus.Unknown,\n      };\n    }\n\n    case LookupLabelStatus.Absent:\n    case LookupLabelStatus.Greater:\n    case LookupLabelStatus.Less: {\n      return {\n        status: LookupSubtreeStatus.Absent,\n      };\n    }\n\n    default: {\n      throw UNREACHABLE_ERROR;\n    }\n  }\n}\n\n/**\n * If the tree is a fork, flatten it into an array of trees\n * @param {HashTree} t the tree to flatten\n * @returns {HashTree[]} the flattened tree\n */\nexport function flatten_forks(t: HashTree): Array<LabeledHashTree | LeafHashTree | PrunedHashTree> {\n  switch (t[0]) {\n    case NodeType.Empty:\n      return [];\n    case NodeType.Fork:\n      return flatten_forks(t[1]).concat(flatten_forks(t[2]));\n    default:\n      return [t];\n  }\n}\n\n/**\n * Find a label in a tree\n * @param label the label to find\n * @param tree the tree to search\n * @returns {LabelLookupResult} the result of the label lookup\n */\nexport function find_label(label: NodeLabel, tree: HashTree): LabelLookupResult {\n  switch (tree[0]) {\n    // if we have a labelled node, compare the node's label to the one we are\n    // looking for\n    case NodeType.Labeled:\n      // if the label we're searching for is greater than this node's label,\n      // we need to keep searching\n      if (isBufferGreaterThan(label, tree[1])) {\n        return {\n          status: LookupLabelStatus.Greater,\n        };\n      }\n\n      // if the label we're searching for is equal this node's label, we can\n      // stop searching and return the found node\n      if (uint8Equals(label, tree[1])) {\n        return {\n          status: LookupLabelStatus.Found,\n          value: tree[2],\n        };\n      }\n\n      // if the label we're searching for is not greater than or equal to this\n      // node's label, then it's less than this node's label, and we can stop\n      // searching because we've looked too far\n      return {\n        status: LookupLabelStatus.Less,\n      };\n\n    // if we have a fork node, we need to search both sides, starting with the left\n    case NodeType.Fork: {\n      // search in the left node\n      const leftLookupResult = find_label(label, tree[1]);\n\n      switch (leftLookupResult.status) {\n        // if the label we're searching for is greater than the left node lookup,\n        // we need to search the right node\n        case LookupLabelStatus.Greater: {\n          const rightLookupResult = find_label(label, tree[2]);\n\n          // if the label we're searching for is less than the right node lookup,\n          // then we can stop searching and say that the label is provably Absent\n          if (rightLookupResult.status === LookupLabelStatus.Less) {\n            return {\n              status: LookupLabelStatus.Absent,\n            };\n          }\n\n          // if the label we're searching for is less than or equal to the right\n          // node lookup, then we let the caller handle it\n          return rightLookupResult;\n        }\n\n        // if the left node returns an uncertain result, we need to search the\n        // right node\n        case LookupLabelStatus.Unknown: {\n          const rightLookupResult = find_label(label, tree[2]);\n\n          // if the label we're searching for is less than the right node lookup,\n          // then we also need to return an uncertain result\n          if (rightLookupResult.status === LookupLabelStatus.Less) {\n            return {\n              status: LookupLabelStatus.Unknown,\n            };\n          }\n\n          // if the label we're searching for is less than or equal to the right\n          // node lookup, then we let the caller handle it\n          return rightLookupResult;\n        }\n\n        // if the label we're searching for is not greater than the left node\n        // lookup, or the result is not uncertain, we stop searching and return\n        // whatever the result of the left node lookup was, which can be either\n        // Found or Absent\n        default: {\n          return leftLookupResult;\n        }\n      }\n    }\n\n    // if we encounter a Pruned node, we can't know for certain if the label\n    // we're searching for is present or not\n    case NodeType.Pruned:\n      return {\n        status: LookupLabelStatus.Unknown,\n      };\n\n    // if the current node is Empty, or a Leaf, we can stop searching because\n    // we know for sure that the label we're searching for is not present\n    default:\n      return {\n        status: LookupLabelStatus.Absent,\n      };\n  }\n}\n\n/**\n * Check if a canister ID falls within the canister ranges of a given subnet\n * @param params the parameters with which to check the canister ranges\n * @param params.canisterId the canister ID to check\n * @param params.subnetId the subnet ID from which to check the canister ranges\n * @param params.tree the hash tree in which to lookup the subnet's canister ranges\n * @returns {boolean} `true` if the canister is in the range, `false` otherwise\n */\nexport function check_canister_ranges(params: {\n  canisterId: Principal;\n  subnetId: Principal;\n  tree: HashTree;\n}): boolean {\n  const { canisterId, subnetId, tree } = params;\n  const rangeLookup = lookup_path(['subnet', subnetId.toUint8Array(), 'canister_ranges'], tree);\n\n  if (rangeLookup.status !== LookupPathStatus.Found) {\n    throw ProtocolError.fromCode(\n      new LookupErrorCode(\n        `Could not find canister ranges for subnet ${subnetId.toText()}`,\n        rangeLookup.status,\n      ),\n    );\n  }\n\n  if (!(rangeLookup.value instanceof Uint8Array)) {\n    throw ProtocolError.fromCode(\n      new MalformedLookupFoundValueErrorCode(\n        `Could not find canister ranges for subnet ${subnetId.toText()}`,\n      ),\n    );\n  }\n\n  const ranges_arr = cbor.decode<Array<[Uint8Array, Uint8Array]>>(rangeLookup.value);\n  const ranges: Array<[Principal, Principal]> = ranges_arr.map(v => [\n    Principal.fromUint8Array(v[0]),\n    Principal.fromUint8Array(v[1]),\n  ]);\n\n  const canisterInRange = ranges.some(r => r[0].ltEq(canisterId) && r[1].gtEq(canisterId));\n\n  return canisterInRange;\n}\n"]}